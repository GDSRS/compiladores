#
# PROVA 1 - Primeira prova de compiladores
# 
# Prof: Fábio Macêdo Mendes
# Aluno 1:
# Matrícula 1:
# Aluno 2:
# Matrícula 2:
# 
# INSTRUÇÕES
# Complete a REGEX de teste para cada questão a fim de passar em todos os
# testes unitários. Você deve escrever a regex na variável "regex" de cada
# seção e tentar fazê-lo utilizando uma quantidade de caracteres menor ou
# igual ao "size".
# 
# Expressões regulares maiores que "size" valem metade da nota. A nota final
# é proporcional ao número de questões que o aluno acertar.
# 
# A prova está dividida em duas partes: na primeira temos questões genéricas
# sobre regex e na segunda as questões são inspiradas em requisitos para a
# linguagem Cremilda*.
#


#
# REGEX - INTRODUÇÃO
# 
# Em sua forma mais simples, um regex simplesmente se compara a outra string.
# 
# Por exemplo, a regex 'hello' simplesmente corresponde à string 'hello'.
# Isto não é muito útil. De qualquer forma, escreva um regex que corresponda
# à string 'hello regex!'
#

[Regex simples]
regex = 
size = 11
accept = hello regex
reject = anything else; hello; regex
enabled = no
weight = 0.5


#
# O que distingue expressões regulares da correspondência de cadeia simples
# é que alguns caracteres tem significados especiais e podem ser usados para
# gerar padrões flexíveis.
# 
# Por exemplo, ao incluir um grupo de caracteres dentro de colchetes
# [abcde ...] estamos declarando que aceitamos qualquer um deles na posição
# dada.
# 
# Crie uma expressão regular que corresponda à sequência 'Hello!' ou
# a string 'hello!'
#

[Seleção de caracteres]
regex = 
size = 9
accept = Hello!; hello!
reject = HELLO!; hello; Hello; goodbye
enabled = no
weight = 0.5


#
# O agrupamento com colchetes ([]) é muito poderoso. Podemos declarar um
# grupo de caracteres ou até mesmo um intervalo de valores. Se os caracteres
# aparecerem sequencialmente (por exemplo, a, b, c, ...) podemos declará-los
# como um intervalo [a-cz-f].
# 
# Crie um agrupamento que corresponda a qualquer dígito de um número
# hexadecimal (letras maiúsculas e minúsculas).
#

[Intervalos]
regex = 
size = 12
accept = 42; FF; 2A; 2a; fF; a2b23cd01
reject = -42; +42; g; G; hex
enabled = no
weight = 0.5


#
# Às vezes é útil aceitar qualquer caractere, exceto aqueles em um
# grupo. Podemos negar um grupo de caracteres iniciando o agrupamento com
# um circunflexo, como em [^abc].
# 
# Crie um regex que corresponda a qualquer string que não contenha as letras
# TEMER (maiúsculas e minúsculas)
#

[Negação]
# Nem maiúsculas nem minúsculas...
regex = 
size = 14
accept = foi golp; foo; 42; *^*#$)@$
reject = gilmar; eduardo
enabled = no
weight = 0.5


#
# Agora algo muito útil: podemos declarar o número de repetições de um padrão.
# As regexes oferecem 3 maneiras básicas de declarar repetições (veremos
# padrões mais avançados no próximo exercício).
# 
# x* - zero ou mais repetições de x
# x+ - uma ou mais repetições de x
# x? - uma ou zero repetições de x (isso é o mesmo que dizer que x
# é opcional)
# 
# Claro que podemos trocar x por qualquer outro personagem ou mesmo por
# grupos de caracteres (como em [abc] *)
# 
# Crie um regex que corresponda a um número inteiro: ele pode ter um sinal
# de adição opcional ou sinal de menos seguido por uma sequência de dígitos.
#

[Repetições]
regex = 
size = 11
accept = 42; 10; 042; 0; -1; +2; +10; 00
reject = 42.0; ++42; --42; +-10
enabled = no
weight = 0.5


#
# Podemos controlar o número de repetições com mais precisão usando
# colchetes:
# 
# x {n} - n repetições
# x {n, m} - entre n e m repetições
# x {n,} - pelo menos n repetições
# x {, m} - no máximo m repetições
# 
# Crie uma expressão regular que corresponda a uma data ISO no formato
# AAAA-MM-DD
#

[Repetições avançadas]
regex = 
size = 26
accept = 2018-03-27; 2018-03-42; 9999-42-00
reject = 2018-3-27; 18-03-27; 2018
enabled = no
weight = 0.5


#
# Os colchetes permitem declarar grupos de caracteres diferentes que
# podem aparecer em uma determinada posição. Se quisermos declarar
# sub-strings, é necessário utilizar o operador de pipe | como em
# pattern1|pattern2.
# 
# Crie uma expressão regular que corresponda a um dos valores "True" ou
# "False"
#

[Alternativas]
regex = 
size = 10
accept = True; False
reject = true; truefalse; TrueFalse; false; hello
enabled = no
weight = 0.5


#
# Coloque um sub-padrão entre parênteses para poder aplicar os outros
# operadores de regex como repetição, concatenação, etc.
# 
# Crie uma regex que corresponda a "Hello world!" ou 'Hello regex!'
#

[Grupos]
regex = 
size = 20
accept = Hello world!; Hello regex!
reject = Hello; world; regex; Hello foo!; !
enabled = no
weight = 0.5


#
# Agora modifique sua regex para corresponder às strings do formato
# 'Hello <full name>!' em que <full name> é composto por uma ou mais partes
# definidas por nomes começam com uma letra maiúscula seguida por uma ou
# mais letras minúsculas.
#

[Grupos avançados]
regex = 
size = 35
accept = Hello World!; Hello John Lennon!; Hello John Winston Lennon!
reject = Hello world!; Hello paul!; Hello World
enabled = no
weight = 0.5


#
# O que acontece se você precisar corresponder um caractere especial,
# como (, [ou +?
# 
# Regexes nos permitem escapar estes caracteres com uma barra invertida,
# como em \+ ou \\. Crie um regex que corresponda às strings
# do formato "<nome> (<idade>)". Lembre-se dos parênteses!
#

[Escape]
regex = 
size = 22
accept = John (42); Paul (50); George (18)
reject = John 42; John Lennon (42); john (42)
enabled = no
weight = 0.5


#
# Todos os caracteres, exceto ] e \ perde seu comportamento especial
# dentro do colchete. O traço (-) e o cursor (^) podem ser escapados para
# perder significado especial dentro de um grupo de suporte.
# 
# Crie uma expressão que corresponda a expressões do formato
# "<número><op><número>" como "1+1"
#

[Escape em um grupo de captura]
# Trate números como inteiros e use as quatro operações fundamentais!
regex = 
size = 19
accept = 1+1; 40+2; 51-10; 2*4; 10/5
reject = 1 + 1; 42; 2**4; 10//5
enabled = no
weight = 0.5


#
# CREMILDA - NOMES DE VARIÁVEIS
# 
# Em Cremilda* faremos uma separação sintática entre nome de tipos vs. nomes
# de variáveis. Isto ajuda o compilador decidir o papel que um determinado
# símbolo deve desempenhar.
# 
# Nomes de variáveis comuns utilizam a convenção snake_case enquanto nomes
# de tipos são CamelCase. Crie uma regex para detectar nomes de variáveis.
#

[Nome de variável]
# Nome pode conter letras minúsculas, números e underscores.
# A primeira letra nunca pode ser um número.
regex = 
size = 16
accept = foo; bar; foo_bar; name; other_name; a; b; _; foo1; foo2
reject = Foo; FooBar; _Foo; FOO; 2foo
enabled = no


[Palavras reservadas]
# Esta é bem fácil: encontre as palavras reservadas que passam no teste
regex = 
size = 12
accept = if; then; else
reject = function; If; Then
enabled = no


#
# Um nome qualificado utiliza pontos para dividir as partes como em
# foo.bar.
#

[Nome qualificado]
regex = 
size = 37
accept = foo; foo.bar; foo.bar.baz; foo_bar.baz
reject = .foo; foo..bar; foo.; foo.bar.; foo$foo ...
enabled = no


#
# TIPOS NUMÉRICOS
# 
# Vamos começar descrevendo os tipos numéricos mais básicos: começe com uma
# regex que capture números inteiros positivos. O número não pode conter um
# zero à esquerda.
#

[Números inteiros]
regex = 
size = 20
accept = 42; 1; -2; -1000; 1234123; 0; +42
reject = 01; 0123; -04; -05; -0234234; -0012; 0002; 00; +0; -0
enabled = no


#
# Esta sintaxe foi rejeitada na Cremilda, mas não na prova!
#

[Número hexadecimal positivo]
# (Letras são sempre maiúsculas)
regex = 
size = 11
accept = 0x0; 0xFF; 0x1F; 0xFA32A3
reject = 0xf; 0x; FF; 0x1G; -0xAF
enabled = no


#
# Esta sintaxe também!
#

[Inteiro com separador de milhares a cada três dígitos]
# O separador é obrigatório!
regex = 
size = 32
accept = 1; -1; 42; 1_000; 1_324; 1_234_567; +1_000_000
reject = 1234; 12_34
enabled = no


#
# Suporte para números de ponto flutuante com parte decimal opcional
#

[Ponto flutuante]
# O separador é obrigatório!
regex = 
size = 30
accept = 1; -1; 42; 1000; 1.0; 3.14; 0.10
reject = 02.10; 50.; .42; .21; dois
enabled = no


#
# STRINGS
# 
# Aqui definimos as strings de Cremilda. As strings são delimitadas
# exclusivametne com aspas duplas. Começamos com o caso fácil onde não pode
# haver nenhuma aspas dentro da própria string.
#

[String simples]
regex = 
size = 7
accept = "foo"; ""; "#*(FW(@$&))"; "escapechar"
reject = "not"escaped"; "forget-to-close; forget-to-open" "str"bad
enabled = no


[String com escape]
# ... agora o caso mais complicado onde a string pode conter uma
# aspa dupla escapada como \"
regex = 
size = 16
accept = "foo"; ""; "foo\"bar"; "\"foo\""
reject = "not"escaped"; "forget-to-close; forget-to-open" "str"bad
enabled = no

