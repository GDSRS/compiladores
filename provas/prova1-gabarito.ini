[config]
intro = 
    PROVA 1 - Primeira prova de compiladores
    
    Prof: Fábio Macêdo Mendes
    Aluno 1: 
    Matrícula 1:
    Aluno 2:
    Matrícula 2: 

    INSTRUÇÕES
    Complete a REGEX de teste para cada questão a fim de passar em todos os 
    testes unitários. Você deve escrever a regex na variável "regex" de cada
    seção e tentar fazê-lo utilizando uma quantidade de caracteres menor ou
    igual ao "size".

    Expressões regulares maiores que "size" valem metade da nota. A nota final
    é proporcional ao número de questões que o aluno acertar.  

    A prova está dividida em duas partes: na primeira temos questões genéricas
    sobre regex e na segunda as questões são inspiradas em requisitos para a 
    linguagem Cremilda*.


[Regex simples]
intro = 
    REGEX - INTRODUÇÃO
    
    Em sua forma mais simples, um regex simplesmente se compara a outra string.

    Por exemplo, a regex 'hello' simplesmente corresponde à string 'hello'. 
    Isto não é muito útil. De qualquer forma, escreva um regex que corresponda 
    à string 'hello regex!'
regex = hello regex
accept = hello regex
reject = anything else; hello; regex
weight = 0.5


[Seleção de caracteres]
intro = 
    O que distingue expressões regulares da correspondência de cadeia simples 
    é que alguns caracteres tem significados especiais e podem ser usados para 
    gerar padrões flexíveis.

    Por exemplo, ao incluir um grupo de caracteres dentro de colchetes 
    [abcde ...] estamos declarando que aceitamos qualquer um deles na posição
    dada.

    Crie uma expressão regular que corresponda à sequência 'Hello!' ou
    a string 'hello!'
regex = [Hh]ello!
accept = Hello!; hello!
reject = HELLO!; hello; Hello; goodbye
weight = 0.5


[Intervalos]
intro =  
    O agrupamento com colchetes ([]) é muito poderoso. Podemos declarar um 
    grupo de caracteres ou até mesmo um intervalo de valores. Se os caracteres
    aparecerem sequencialmente (por exemplo, a, b, c, ...) podemos declará-los 
    como um intervalo [a-cz-f].

    Crie um agrupamento que corresponda a qualquer dígito de um número 
    hexadecimal (letras maiúsculas e minúsculas).
regex = [0-9a-fA-F]+
accept = 42; FF; 2A; 2a; fF; a2b23cd01
reject = -42; +42; g; G; hex
weight = 0.5


[Negação]
intro = 
    Às vezes é útil aceitar qualquer caractere, exceto aqueles em um
    grupo. Podemos negar um grupo de caracteres iniciando o agrupamento com
    um circunflexo, como em [^abc].

    Crie um regex que corresponda a qualquer string que não contenha as letras
    TEMER (maiúsculas e minúsculas)
help = Nem maiúsculas nem minúsculas...
regex = [^temerTEMER]*
accept = foi golp; foo; 42; *^*#$)@$
reject = gilmar; eduardo
weight = 0.5


[Repetições]
intro =
    Agora algo muito útil: podemos declarar o número de repetições de um padrão.
    As regexes oferecem 3 maneiras básicas de declarar repetições (veremos
    padrões mais avançados no próximo exercício).

         x* - zero ou mais repetições de x
         x+ - uma ou mais repetições de x
         x? - uma ou zero repetições de x (isso é o mesmo que dizer que x
              é opcional)
     
    Claro que podemos trocar x por qualquer outro personagem ou mesmo por 
    grupos de caracteres (como em [abc] *)
    
    Crie um regex que corresponda a um número inteiro: ele pode ter um sinal 
    de adição opcional ou sinal de menos seguido por uma sequência de dígitos.
regex = [+-]?[0-9]+
accept = 42; 10; 042; 0; -1; +2; +10; 00
reject = 42.0; ++42; --42; +-10
weight = 0.5


[Repetições avançadas]
intro =
    Podemos controlar o número de repetições com mais precisão usando 
    colchetes:

        x {n} - n repetições
        x {n, m} - entre n e m repetições
        x {n,} - pelo menos n repetições
        x {, m} - no máximo m repetições
    
    Crie uma expressão regular que corresponda a uma data ISO no formato 
    AAAA-MM-DD    
regex = [0-9]{4}-[0-9]{2}-[0-9]{2}
accept = 2018-03-27; 2018-03-42; 9999-42-00
reject = 2018-3-27; 18-03-27; 2018
weight = 0.5


[Alternativas]
intro = Os colchetes permitem declarar grupos de caracteres diferentes que 
    podem aparecer em uma determinada posição. Se quisermos declarar 
    sub-strings, é necessário utilizar o operador de pipe | como em
    pattern1|pattern2.
    
    Crie uma expressão regular que corresponda a um dos valores "True" ou 
    "False"
regex = True|False
accept = True; False
reject = true; truefalse; TrueFalse; false; hello
weight = 0.5


[Grupos]
intro = Coloque um sub-padrão entre parênteses para poder aplicar os outros
    operadores de regex como repetição, concatenação, etc.
    
    Crie uma regex que corresponda a "Hello world!" ou 'Hello regex!'
regex = Hello (world|regex)!
accept = Hello world!; Hello regex!
reject = Hello; world; regex; Hello foo!; !
weight = 0.5


[Grupos avançados]
intro = Agora modifique sua regex para corresponder às strings do formato
    'Hello <full name>!' em que <full name> é composto por uma ou mais partes 
    definidas por nomes começam com uma letra maiúscula seguida por uma ou 
    mais letras minúsculas.
regex = Hello ([A-Z][a-z]+( [A-Z][a-z]+)*)!
accept = Hello World!; Hello John Lennon!; Hello John Winston Lennon!
reject = Hello world!; Hello paul!; Hello World
weight = 0.5


[Escape]
intro = O que acontece se você precisar corresponder um caractere especial,
    como (, [ou +?

    Regexes nos permitem escapar estes caracteres com uma barra invertida, 
    como em \+ ou \\. Crie um regex que corresponda às strings 
    do formato "<nome> (<idade>)". Lembre-se dos parênteses!
regex = [A-Z][a-z]+ \([0-9]+\)
accept = John (42); Paul (50); George (18)
reject = John 42; John Lennon (42); john (42)
weight = 0.5


[Escape em um grupo de captura]
intro = Todos os caracteres, exceto ] e \ perde seu comportamento especial 
    dentro do colchete. O traço (-) e o cursor (^) podem ser escapados para 
    perder significado especial dentro de um grupo de suporte.

     Crie uma expressão que corresponda a expressões do formato
     "<número><op><número>" como "1+1"
help = Trate números como inteiros e use as quatro operações fundamentais!
regex = [0-9]+[-+*/^][0-9]+
accept = 1+1; 40+2; 51-10; 2*4; 10/5
reject = 1 + 1; 42; 2**4; 10//5
weight = 0.5


# CREMILDA
[Nome de variável]
intro = 
    CREMILDA - NOMES DE VARIÁVEIS

    Em Cremilda* faremos uma separação sintática entre nome de tipos vs. nomes
    de variáveis. Isto ajuda o compilador decidir o papel que um determinado
    símbolo deve desempenhar.

    Nomes de variáveis comuns utilizam a convenção snake_case enquanto nomes
    de tipos são CamelCase. Crie uma regex para detectar nomes de variáveis.
help = Nome pode conter letras minúsculas, números e underscores.
    A primeira letra nunca pode ser um número.
regex = [a-z_][a-z_0-9]*
accept = foo; bar; foo_bar; name; other_name; a; b; _; foo1; foo2
reject = Foo; FooBar; _Foo; FOO; 2foo


[Palavras reservadas]
help = Esta é bem fácil: encontre as palavras reservadas que passam no teste
regex = if|then|else
accept = if; then; else
reject = function; If; Then


[Nome qualificado]
intro = Um nome qualificado utiliza pontos para dividir as partes como em
    foo.bar.
regex = [a-z_][a-z_0-9]*(\.[a-z_][a-z_0-9]*)*
accept = foo; foo.bar; foo.bar.baz; foo_bar.baz
reject = .foo; foo..bar; foo.; foo.bar.; foo$foo ...


[Números inteiros]
intro = 
    TIPOS NUMÉRICOS
    
    Vamos começar descrevendo os tipos numéricos mais básicos: começe com uma
    regex que capture números inteiros positivos. O número não pode conter um
    zero à esquerda.
regex = ([+-]?[1-9][0-9]*|0)
accept = 42; 1; -2; -1000; 1234123; 0; +42
reject = 01; 0123; -04; -05; -0234234; -0012; 0002; 00; +0; -0 


[Número hexadecimal positivo]
intro = Esta sintaxe foi rejeitada na Cremilda, mas não na prova!
help = (Letras são sempre maiúsculas) 
regex = 0x[0-9A-F]+
accept = 0x0; 0xFF; 0x1F; 0xFA32A3
reject = 0xf; 0x; FF; 0x1G; -0xAF


[Inteiro com separador de milhares a cada três dígitos]
intro = Esta sintaxe também!
help = O separador é obrigatório!
regex = [+-]?[1-9][0-9]{0,2}(_[0-9]{3})*
accept = 1; -1; 42; 1_000; 1_324; 1_234_567; +1_000_000
reject = 1234; 12_34


[Ponto flutuante]
intro = Suporte para números de ponto flutuante com parte decimal opcional
help = O separador é obrigatório!
regex = ([+-]?[1-9][0-9]*|0)(.[0-9]+)?
accept = 1; -1; 42; 1000; 1.0; 3.14; 0.10
reject = 02.10; 50.; .42; .21; dois


[String simples]
intro = 
    STRINGS

    Aqui definimos as strings de Cremilda. As strings são delimitadas 
    exclusivametne com aspas duplas. Começamos com o caso fácil onde não pode
    haver nenhuma aspas dentro da própria string. 
regex = "[^"]*"
accept = "foo"; ""; "#*(FW(@$&))"; "escapechar"
reject = "not"escaped"; "forget-to-close; forget-to-open" "str"bad


[String com escape]
help = ... agora o caso mais complicado onde a string pode conter uma 
    aspa dupla escapada como \"
regex = "([^\\"]*|\\")*"
accept = "foo"; ""; "foo\"bar"; "\"foo\""
reject = "not"escaped"; "forget-to-close; forget-to-open" "str"bad